static void (^removeChildViewControllers)(NSArray<__kindof UIViewController *> *) = ^(NSArray<__kindof UIViewController *> *childViewControllers) {
    for (__kindof UIViewController * childViewController in childViewControllers) {
        [childViewController willMoveToParentViewController:nil];
        [[childViewController view] removeFromSuperview];
        [childViewController removeFromParentViewController];
    }
};

static void (^addChildViewControllerToParent)(__weak __typeof__(UIViewController * _Nonnull), __weak __typeof__(UIViewController * _Nonnull)) = ^(__weak __typeof__(UIViewController * _Nonnull)w_childViewController, __weak __typeof__(UIViewController * _Nonnull)w_parentViewController) {
    __strong __typeof__ (UIViewController *) s_parentViewController = w_parentViewController;
    __strong __typeof__ (UIViewController *) s_childViewController = w_childViewController;
    
    dispatch_async(dispatch_get_main_queue(), ^{
        removeChildViewControllers([s_parentViewController childViewControllers]);
        
        [s_parentViewController addChildViewController:s_childViewController];
        [s_childViewController didMoveToParentViewController:s_parentViewController];
        
        // match the child size to its parent
        CGRect frame = s_childViewController.view.frame;
        frame.size.height = CGRectGetHeight(((RootMessagesViewController *)s_parentViewController).view.frame);
        frame.size.width = CGRectGetWidth(((RootMessagesViewController *)s_parentViewController).view.frame);
        s_childViewController.view.frame = frame;
        
        [((RootMessagesViewController *)s_parentViewController).view addSubview:s_childViewController.view];
        
        if ([s_childViewController isKindOfClass:[ExpandedMessagesViewController class]])
            [(ExpandedMessagesViewController *)s_childViewController setDelegate:(id <ExpandedMessagesViewControllerDelegate>)s_parentViewController];
    });
};

    __weak __typeof__ (self) w_self = self;
